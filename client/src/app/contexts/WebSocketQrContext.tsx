"use client";

import {
  createContext,
  ReactNode,
  useContext,
  useState,
  useCallback,
  useEffect,
} from "react";
import { io, ManagerOptions, Socket, SocketOptions } from "socket.io-client";
// ‚õîÔ∏è ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ HOST_API_QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Socket ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
// import { HOST_API_QR } from "../confix";

export type WebSocketQrContextProps = {
  socketQr: Socket | null;
  connectQr: () => void;
  disconnectQr: () => void;
};

const initialState: WebSocketQrContextProps = {
  socketQr: null,
  connectQr: () => {},
  disconnectQr: () => {},
};

const WebSocketQrContext = createContext(initialState);

type Props = {
  children: ReactNode;
};

export function WebSocketQrProvider({ children }: Props) {
  const [socketQr, setSocketQr] = useState<Socket | null>(null);
  const [isConnecting, setIsConnecting] = useState(false); // Refined state

  const disconnectQr = useCallback(() => {
    if (socketQr) {
      console.log("üîå [WebSocketQR] Disconnecting...");
      socketQr.disconnect();
      setSocketQr(null);
    }
  }, [socketQr]);

  const connectQr = useCallback(() => {
    if ((socketQr && socketQr.connected) || isConnecting) {
      console.warn(
        "‚ö†Ô∏è [WebSocketQR] Already connected or connection in progress."
      );
      return;
    }

    setIsConnecting(true);
    console.groupCollapsed("üõ∞Ô∏è [WebSocketQR] Connecting...");

    const options: Partial<SocketOptions & ManagerOptions> = {
      transports: ["websocket", "polling"],
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionAttempts: 5,
      timeout: 5000,
      withCredentials: false,
      // ‚õîÔ∏è ‡∏•‡∏ö path: "/socket.io" ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    };

    // --- ‚úÖ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ "path" ‡∏ó‡∏µ‡πà Nginx ‡∏à‡∏∞‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö (‡∏ï‡∏≤‡∏° Rule 3)
    // ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Host ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (http://localhost:4000)
    // ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    const socketPath = "/ws-qr/socket.io";
    console.log(`üõ∞Ô∏è [WebSocketQR] Connecting via path: ${socketPath}`);
    console.groupEnd();

    // ‚õîÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    // const newSocket = io(HOST_API_QR, options);

    // ‚ú® ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    const newSocket = io({
      ...options, // ‡πÄ‡∏≠‡∏≤ options ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤
      path: socketPath, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    });

    // --- (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á Log ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---

    newSocket.on("connect", () => {
      console.log(`‚úÖ [WebSocketQR] Connected! Socket ID: ${newSocket.id}`);
      setIsConnecting(false);
      setSocketQr(newSocket);
    });

    newSocket.on("disconnect", (reason) => {
      console.warn(`[WebSocketQR] üîå Disconnected. Reason: ${reason}`);
      setIsConnecting(false); // Also reset if disconnect happens during connection attempt
      setSocketQr(null);
    });

    newSocket.on("connect_error", (error) => {
      console.error("‚ùå [WebSocketQR] Connection Error:", error.message);
      setIsConnecting(false);
    });

    newSocket.onAny((event, ...args) => {
      console.log(`üì° [WebSocketQR] Event received ‚Üí ${event}:`, ...args);
    });
  }, [socketQr, isConnecting]);

  // Cleanup effect
  useEffect(() => {
    return () => {
      if (socketQr) {
        console.log("üí• [WebSocketQR] Provider unmounted ‚Üí disconnect");
        socketQr.disconnect();
      }
    };
  }, [socketQr]);

  return (
    <WebSocketQrContext.Provider value={{ socketQr, connectQr, disconnectQr }}>
      {children}
    </WebSocketQrContext.Provider>
  );
}

const useWebSocketQr = () => useContext(WebSocketQrContext);
export default useWebSocketQr;
